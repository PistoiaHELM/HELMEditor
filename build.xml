<?xml version="1.0" encoding="UTF-8"?>
<project name="HELMAntibodyEditor" default="dist" basedir=".">
	<description>HELM Editor containing Antibody extension</description>

	<!-- global properties -->
	<property name="src" location="source" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="temp" location="temp" />
	<property name="lib" location="lib" />
	<property name="yFiles" location="local/yWorks" />
	<property name="jar" value="HELMAntibodyEditor.jar" />

	<!-- compile time classpath -->
	<path id="classpath">
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${yFiles}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- runtime class path -->
	<path id="runtime.classpath">
		<fileset dir="${lib}">
			<include name="*.jar" />
			<exclude name="junit-4.11.jar" />
			<exclude name="hamcrest-core-1.3.jar" />
		</fileset>

		<pathelement location="lib/y.jar" />
		<pathelement location="lib/yguard.jar" />
		<pathelement location="lib/graphml.jar" />
		<pathelement location="lib/ObfuscationAnnotation.jar" />
	</path>

	<!-- convert classpath to a property for the MANIFEST file             -->
	<!-- transform the path from (semi-)colon separated to space separated -->
	<manifestclasspath property="manifest.classpath" jarfile="${jar}">
		<classpath refid="runtime.classpath" />
	</manifestclasspath>

	<!-- ANT targets -->
	<target name="init">
		<tstamp />
		<!-- create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init">
		<!-- copy non-Java files -->
		<copy todir="${build}">
			<fileset dir="${src}">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="resources">
				<include name="**/*.*" />
			</fileset>
		</copy>

		<!-- compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" source="1.6" target="1.6" debug="on" debuglevel="lines,vars,source" optimize="off" includeantruntime="false">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<target name="dist" depends="compile">
		<mkdir dir="${temp}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />
		<mkdir dir="${dist}/config" />

		<!-- Put everything in ${build} into the HELMextension.jar file -->
		<jar jarfile="${temp}/${jar}" basedir="${build}" index="false">
			<manifest>
				<attribute name="Main-Class" value="org.helm.editor.HELMApp" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
		</jar>

		<!-- Copy runtime libraries -->
		<copy todir="${dist}/lib">
			<fileset dir="${lib}">
				<include name="*.jar" />
				<exclude name="junit-4.11.jar" />
				<exclude name="hamcrest-core-1.3.jar" />
			</fileset>
			<fileset dir="${yFiles}">
				<include name="yguard.jar" />
				<include name="ObfuscationAnnotation.jar" />
			</fileset>
		</copy>


		<!-- Copy additional externa files and directories -->
		<copy todir="${dist}/config">
			<fileset dir="config">
				<include name="*.*" />
			</fileset>
		</copy>

		<copy todir="${dist}">
			<fileset dir=".">
				<include name="*.exe" />
			</fileset>
		</copy>

		<!-- Create obfuscated Jars -->
		<taskdef name="yguard" classname="com.yworks.yguard.YGuardTask" classpath="${yFiles}/yguard.jar" />

		<yguard>
			<inoutpair in="${temp}/${jar}" out="${dist}/${jar}" />
			<inoutpair in="${yFiles}/y.jar" out="${dist}/lib/y.jar" />
			<inoutpair in="${yFiles}//graphml.jar" out="${dist}/lib/graphml.jar" />

			<!-- [OPTIONALLY] Keep the line number table and the source file attributes of the public part of the "application" -->
			<attribute name="LineNumberTable,SourceFile">
				<patternset>
					<include name="org.helm.**" />
				</patternset>
			</attribute>

			<rename replaceClassNameStrings="true">
				<!-- use some unique package prefix for obfuscated classes to avoid name clashes -->
				<property name="obfuscation-prefix" value="yguard" />

				<!-- make sure not rely on cases to differentiate names -->
				<property name="language-conformity" value="compatible" />

				<keep>
					<class classes="private" methods="private" fields="private">
						<patternset>
							<include name="**.*" />
							<exclude name="y.**.*" />
							<exclude name="yext.**.*" />
						</patternset>
					</class>
				</keep>

				<!-- make sure that the .properties files are renamed according to their               -->
				<!-- corresponding class files, yFiles needs this to function properly when obfuscated -->
				<adjust replaceName="true">
					<include name="y/**/*.properties" />
				</adjust>
			</rename>
		</yguard>

		<!-- Now zip together the contents of the dist directory -->
		<zip destfile="HELMAntibodyEditor-${DSTAMP}${TSTAMP}.zip" basedir="${dist}" />
	</target>

	<!-- clean up -->
	<target name="clean">
		<!-- Delete the ${build} and ${dist} directory trees -->		
		<delete dir="${build}" failonerror="false" />
		<delete dir="${dist}" failonerror="false" />
		<delete dir="${temp}" failonerror="false" />
	</target>
</project>



